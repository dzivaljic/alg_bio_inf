def hamming_distance(text1,text2):
    br=0
    for i in range(0,len(text1)):
        if(text1[i]!=text2[i]):
            br=br+1
    return br

def freq_max(text,k,d1,D):
    d=dict()
    for i in D:
        br=0
        for j in range(0,len(text)-k):
            if(hamming_distance(i, text[j:j+k])<=d1):
                br=br+1
        d[i]=br
    return d
    
def generate_all_kmer(k):
    rez={"A","C","G","T"}
    D={0:"A",1:"C",2:"G",3:"T"}
    while len(rez)<4**k:
        rez={i+j for i in rez for j in D.values()}
    return rez
    
                

if __name__ == "__main__":

    text = "ACGACGGAAGACGACGGAAGGGCCTGGGGGCCTGGGCATTAAACAGCGCGATCTAGGGATTGGAGACGACGGAAGACGACGGAAGGGGATTGGAGGGCCTGGGCGCGATCTAGGGATTGGAGGGGATTGGAGGGCCTGGGGGGATTGGAGCGCGATCTAGGGATTGGAGCGCGATCTAACGACGGAAGACGACGGAAGACGACGGAAGACGACGGAAGACGACGGAAGGGCCTGGGCATTAAACAGCGCGATCTAACGACGGAAGCATTAAACAGGGGATTGGAGACGACGGAAGCATTAAACAGACGACGGAAGCATTAAACAGACGACGGAAGACGACGGAAGCATTAAACAGCATTAAACAGCGCGATCTACATTAAACAGACGACGGAAGCATTAAACAGCGCGATCTAGGCCTGGGCATTAAACAGCATTAAACAGGGCCTGGGCATTAAACAGCATTAAACAGGGCCTGGGGGCCTGGGGGCCTGGGCGCGATCTAACGACGGAAGCATTAAACAGCATTAAACAGCATTAAACAGCATTAAACAGACGACGGAAGCGCGATCTAACGACGGAAGACGACGGAAGCGCGATCTAACGACGGAAGGGGATTGGAGCGCGATCTACGCGATCTACGCGATCTAGGGATTGGAGGGGATTGGAGGGCCTGGGACGACGGAAGCGCGATCTAGGCCTGGGACGACGGAAGCGCGATCTACGCGATCTAGGGATTGGAGCATTAAACAGGGGATTGGAGCATTAAACAGCATTAAACAGGGGATTGGAGGGCCTGGGACGACGGAAGGGGATTGGAGCATTAAACAGCATTAAACAGGGGATTGGAGGGCCTGGGGGGATTGGAGCATTAAACAGGGGATTGGAGGGCCTGGGCATTAAACAGGGGATTGGAGGGCCTGGGGGCCTGGGCGCGATCTAACGACGGAAG"
    k=6
    d1=3

    res = freq_max(text,k,d1,generate_all_kmer(k))
    print("\n".join([k for k in res.keys() if res[k]==max(res.values())]))
    


